---
title: Despliegue de modelos de IA con FastAPI y Docker
format: clean-revealjs
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: Andrea Gutiérrez Alfaro
    orcid: 0009-0001-4316-6225
    email: ag2202633@gmail.com
    affiliations: Cómputo Inteligente, Centro de Investigación en Computación, IPN
date: last-modified
---

## ¿Para quién es este taller?

- Personas que hayan trabajado con Python
- Cualquiera que tenga interés en IA y desarrollo de software
- Quien quiera aprender algo nuevo

## ¿Qué no es este taller?

- Un taller a profundidad, es más para conocer un poco del despliegue

## ¿Por qué este taller?

- Para llevar más allá los modelos una vez de entrenarlos

## ¿De qué va el taller?

1. Crear un modelo con algún framework
2. Desarrollar una API para dicho modelo
3. Colocar todo dentro de un contenedor

## AI Model Lifecycle Diagram

<div style="position: relative;">
  <img src="https://assets.gcore.pro/blog_containerizing_prod/uploads/2024/04/ai-model-lifecycle-1.png" style="width: 100%;">

  <!-- Highlight Part 1 -->
  <div class="fragment" style="position: absolute; top: 10%; left: 35%; width: 23%; height: 15%; border: 3px solid red;"></div>

  <!-- Highlight Part 2 -->
  <div class="fragment" style="position: absolute; top: 35%; left:62.5%; width: 25%; height: 17%; border: 3px solid blue;"></div>

  <!-- Highlight Part 3 -->
  <div class="fragment" style="position: absolute; top: 71%; left:54%; width: 25%; height: 17%; border: 3px solid green;"></div>  

  <!-- Highlight Part 4 -->
  <div class="fragment" style="position: absolute; top: 71%; left:15.5%; width: 25%; height: 17%; border: 3px solid orange;"></div>  

  <!-- Highlight Part 5 -->
  <div class="fragment" style="position: absolute; top: 35%; left:6.9%; width: 25%; height: 17%; border: 3px solid purple;"></div>
</div>

# Antes de comenzar

## Instalaciones requeridas

### Requisitos para Windows

::: {.callout-warning}

**Dependencias necesarias**

Por lo general, al desplegar modelos se utiliza más
Linux y la consola, por lo que trabajaremos con Windows
Subsystem for Linux 

```powershell
dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart

dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart

wsl --install

wsl --update

wsl --install -d Ubuntu-24.04
```
:::

##

### Instalaciones necesarias (Docker y pip)

::: {.callout-warning}

**Repositorio**

```bash
# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) vsigned-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
```
**Instalación de Docker**

```bash
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
```
**Instalación de entorno virtual para pip**

```bash
sudo apt install python3-venv
```

:::


# Entendiendo el problema {background-color="#40666e"}

##

### Clasificación de plantas

Aunque es algo básico, vamos a intentar conocer el 
despliegue de modelos con un conjunto bastante conocido.

<div style="text-align: center;">
  ![Iris Plant](https://upload.wikimedia.org/wikipedia/commons/4/41/Iris_versicolor_3.jpg){width="50%"}

</div>

## El problema de clasificar plantas

El conjunto de datos de Iris es un clásico en el aprendizaje automático. Contiene 150 muestras de flores de iris, divididas en tres especies: **Iris setosa**, **Iris versicolor** e **Iris virginica**.

- **Características:**
  - Longitud del sépalo
  - Anchura del sépalo
  - Longitud del pétalo
  - Anchura del pétalo

---

## El problema de clasificar plantas {transition="fade"}

- **Desafíos en la clasificación:**
  - **Solapamiento de clases:** Las especies *Iris versicolor* e *Iris virginica* presentan características similares, lo que dificulta su separación.
  - **Variabilidad natural:** Existe variación dentro de cada especie, lo que puede complicar la precisión del modelo.
  - **Dimensionalidad baja:** Solo cuatro características pueden limitar la capacidad del modelo para capturar patrones más complejos.
  - **Tamaño de muestra reducido:** Con solo 150 muestras, existe el riesgo de sobreajuste si no se maneja adecuadamente.

## Antes de comenzar...

### Requisitos para esta parte

::: {.callout-warning}

**Dependencias necesarias**

**Paquetes de Python (extra)**

```bash
pip install matplotlib numpy scikit-learn
```
Aunque no todos los paquetes son necesarios, como 
`matlplotlib` nos pueden ser útiles para otras tareas
:::

## Visualización del conjunto Iris con Matplotlib

```{python}
#| echo: true
#| label: fig-pairs
#| fig-cap: "Pairwise scatterplot" 
#| fig-asp: 1
#| output-location: column


import matplotlib.pyplot as plt
import pandas as pd
from sklearn import datasets

iris = datasets.load_iris()
df = pd.DataFrame(iris.data, columns=iris.feature_names)
df['species'] = pd.Categorical.from_codes(iris.target, iris.target_names)

plt.figure(figsize=(8, 6))
for species in df['species'].unique():
    subset = df[df['species'] == species]
    plt.scatter(subset['petal length (cm)'], subset['petal width (cm)'], label=species)

plt.title("Gráfico de dispersión típico del conjunto Iris")
plt.xlabel("Longitud del pétalo (cm)")
plt.ylabel("Anchura del pétalo (cm)")
plt.legend()
plt.grid(True)
plt.show()
```

# Veamos algo de código 

<center>
<div class="side-by-side">
  <img src="https://media.licdn.com/dms/image/D4E22AQFL9D8PIFkcYw/feedshare-shrink_2048_1536/0/1719824223578?e=2147483647&v=beta&t=3tmej75mgLgpOQ7UkDfHErZw9AeE1Ny7id8ttt7XNUI" alt="Image 1" class="image-400">
</div>
</center>


# Todo el código lo pueden encontrar en el repo de Github

## K-Nearest Neighbors

### Pasos (algoritmo del k-NN)

1. Elegir un valor arbitrario para k
2. Calculamos la distancia con respecto a nuestro elemento desconocido

:::{.callout-note}
## Distancia euclidea


$$
d(\mathbf{x}, \mathbf{y}) = \sqrt{\sum_{i=1}^{n} (x_i - y_i)^2}
$$
:::

3. Ordenar las distancias de menor a mayor (las más cercanas)
4. Elegir las k distancias más cercas
5. Contar la etiqueta de dichas distancias y tomar la más repetida como la predicción


## Naive Bayes

### Introducción al Algoritmo Naive Bayes

El algoritmo **Naive Bayes** es un clasificador probabilístico basado en el teorema de Bayes con la suposición de independencia entre características.

### Teorema de Bayes

$$
P(C \mid X) = \frac{P(X \mid C) \cdot P(C)}{P(X)}
$$


# Introducción a las API y FastAPI

<center>
<div class="side-by-side">
  <img src="https://64.media.tumblr.com/e642b66f8548fa1485621bd82d3eacc9/df8c8427627025f7-72/s640x960/af7dc108c6fd722e684f767aa7ad6b9f72f9d9c9.gifv" alt="Image 1" class="image-400">
</div>
</center>



## ¿Qué es una API?
- Una API (Interfaz de Programación de Aplicaciones) es un conjunto de reglas y protocolos que permite que diferentes aplicaciones se comuniquen entre sí.

<div style="text-align: center;">
  ![Representación API](https://voyager.postman.com/illustration/diagram-what-is-an-api-postman-illustration.svg){width="65%"}
</div>

## API REST
- REST (Representational State Transfer) es un estilo arquitectónico para diseñar APIs que utilizan los protocolos HTTP para permitir la comunicación entre cliente y servidor.

### Caracteristicas 
- Sin estado (Stateless): El servidor no almacena información de estado entre solicitudes.
- Métodos HTTP Estándar: Utiliza métodos como GET, POST, PUT, DELETE.

##

### Métodos HTTP y Operaciones CRUD

Para interactuar con una API RESTful, utilizamos diferentes métodos HTTP que corresponden a operaciones CRUD:

::: {.table .table-striped .table-bordered .table-hover .w-75 .mx-auto}

| **Método HTTP** | **Acción**               | **Operación CRUD** |
|-----------------|--------------------------|--------------------|
| **GET**         | Obtener recursos         | Read               |
| **POST**        | Crear un nuevo recurso   | Create             |
| **PUT**         | Actualizar un recurso    | Update             |
| **DELETE**      | Eliminar un recurso      | Delete             |

:::

## Introducción a FastAPI

- **FastAPI** es un moderno framework web para construir APIs en Python, de alto rendimiento, fácil de usar y con validación automática de datos.

- Es uno de los frameworks más populares para crear API,
además de que, como su nombre lo indica es muy sencillo crear API

- Al ser muy eficiente y rápido, FastAPI es muy útilizado para desplegar modelos

<div style="text-align: center;">
  ![FastAPI Logo](https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png){width="30%"}
</div>

##

### Características principales

- **Alto rendimiento**: Basado en **Starlette** y **Pydantic**, utiliza **asyncio** para manejar múltiples solicitudes de manera eficiente.
- **Facilidad de uso**: Diseñado para ser fácil de aprender y usar, con una sintaxis intuitiva.
- **Validación automática**: Utiliza anotaciones de tipos en Python para validar entradas y salidas automáticamente.
- **Documentación interactiva**: Genera documentación automática y explorable gracias a OpenAPI (Swagger UI y ReDoc).
- **Basado en estándares**: Sigue los estándares modernos de desarrollo web (OpenAPI, JSON Schema).

---

### Ventajas de FastAPI

- **Desarrollo rápido**: Menos código repetitivo, lo que acelera el desarrollo.
- **Menos errores**: Validación automática reduce errores comunes.
- **Excelente rendimiento**: Comparable a NodeJS y Go.
- **Soporte para asíncronía**: Manejo eficiente de operaciones I/O intensivas.

---

### Comparación con otros frameworks

::: {.table .table-striped .table-bordered .table-hover .w-75 .mx-auto}

| **Característica**      | **FastAPI** | **Flask** | **Django REST** |
|-------------------------|-------------|-----------|-----------------|
| Rendimiento             | Alto        | Medio     | Medio           |
| Fácil de usar           | Sí          | Sí        | Sí              |
| Validación automática   | Sí          | No        | Sí              |
| Documentación automática| Sí          | No        | Sí              |
| Soporte asíncrono       | Sí          | Limitado  | Limitado        |

:::

---

### Ejemplo básico con FastAPI {.scrollable .smaller}

::: {.callout-warning}

**Instalación de FastAPI**

```bash
pip install "fastapi[standard]"
```
:::

```python
from fastapi import FastAPI

app = FastAPI()

@app.get("/hello")
def read_root():
    return {"message": "¡Hola, mundo!"}
```

## Ejemplo básico con FastAPI {.scrollable .smaller}

```python
from fastapi import FastAPI

app = FastAPI()

@app.get("/hello")
def read_root():
    return {"message": "¡Hola, mundo!"}
```
- Explicación:
  - Importamos `FastAPI` y creamos una instancia de la aplicación.
  - Utilizamos el decorador `@app.get` para definir una ruta GET en /hello.
  - La función `read_root` maneja la solicitud y devuelve una respuesta JSON.

# Más código

<center>
<div class="side-by-side">
  <img src="https://imageproxy.ifunny.co/resize:640x,quality:90x75/images/d06fac97b1e4549c4288457cbbb5502d4a124fab70c0f924698bf14ad4c00ca0_3.jpg" alt="Image 1" class="image-400">
</div>
</center>

# Antes de crear la API... ONNX

## **¿Qué es ONNX?**

- **ONNX** (Open Neural Network Exchange) es un formato abierto para representar modelos de aprendizaje automático.
- Permite la **interoperabilidad** entre diferentes frameworks y herramientas, facilitando el traslado de modelos entre ellos.
- **Beneficios clave:**
  - **Portabilidad:** Mueve modelos fácilmente entre distintos entornos.
  - **Eficiencia:** Optimiza modelos para diferentes hardware y acelera la inferencia.
  - **Comunidad amplia:** Soportado por empresas y proyectos líderes en IA.

<div style="text-align: center;">
  ![ONNX Logo](https://upload.wikimedia.org/wikipedia/commons/thumb/c/c0/ONNX_logo_main.png/1200px-ONNX_logo_main.png){width="30%"}
</div>

---

## **¿Por qué usar ONNX en lugar de pickle?**

### **Limitaciones de pickle:**

- **Dependencia de Python:** Los modelos serializados con pickle solo pueden ser deserializados en Python.
- **Problemas de seguridad:** Cargar objetos con pickle puede ser inseguro si los datos provienen de fuentes no confiables.
- **Portabilidad limitada:** Dificultad para utilizar modelos en otros lenguajes o plataformas.

##

### **Ventajas de ONNX:**

- **Interoperabilidad Multilenguaje:**
  - ONNX permite que los modelos se utilicen en diferentes lenguajes como C++, Java, y más.
- **Ejecución Optimizada:**
  - Con **ONNX Runtime**, los modelos pueden ejecutarse de manera más eficiente.
- **Estandarización:**
  - Proporciona un estándar común para representar modelos, facilitando el mantenimiento y la colaboración.
- **Seguridad Mejorada:**
  - Al ser un formato de modelo, reduce riesgos asociados con la ejecución de código arbitrario.

##

### **Alternativas y Comparación:**

::: {.table .table-striped .table-bordered .table-hover .w-75 .mx-auto}

| **Formato** | **Pros**                                        | **Contras**                                  |
|-------------|--------------------------------------------------|----------------------------------------------|
| **Pickle**  | - Fácil de usar en Python<br>- Serialización rápida | - No seguro<br>- No portátil fuera de Python |
| **Joblib**  | - Optimizado para numpy<br>- Compresión          | - Misma limitación que pickle                |
| **ONNX**    | - Interoperable<br>- Eficiente<br>- Estándar abierto | - Soporte limitado para algunos modelos específicos |

:::

::: {.callout-warning}

**Instalación de ONNX**

```bash
pip install skl2onnx onnxmltools onnxruntime
```
Estas herramientas nos permiten usar ONNX, algunas utilidades y además convertir modelos de Scikit-Learn en ONNX, lo cual no se puede de "forma nativa"
:::

# Docker

## **¿Qué es Docker?**

- **Docker** es una plataforma que permite empaquetar aplicaciones y sus dependencias en contenedores, lo que facilita su distribución y ejecución en cualquier entorno.
- **Contenedores vs. Máquinas Virtuales:**
  - **Contenedores:** Ligeros, comparten el kernel del sistema operativo, inicio rápido.
  - **Máquinas Virtuales:** Más pesadas, incluyen un sistema operativo completo, inicio más lento.

<div style="text-align: center;">
  <img src="https://www.docker.com/wp-content/uploads/2022/03/horizontal-logo-monochromatic-white.png" alt="Docker Logo" style="width: 40%;">
</div>

---

## **¿Por qué usar Docker?**

- **Portabilidad:**
  - "Funciona en mi máquina" ahora significa "funciona en cualquier máquina".
- **Consistencia:**
  - Mismo entorno en desarrollo, pruebas y producción.
- **Aislamiento:**
  - Los contenedores tienen su propio espacio de ejecución, evitando conflictos.
- **Eficiencia:**
  - Menos consumo de recursos que las máquinas virtuales.

---

## **Conceptos Clave en Docker**

- **Imagen (Image):**
  - Plantilla inmutable que incluye todo lo necesario para ejecutar una aplicación.
- **Contenedor (Container):**
  - Instancia en ejecución de una imagen.
- **Dockerfile:**
  - Archivo de texto que contiene instrucciones para construir una imagen.
- **Docker Hub:**
  - Registro público donde puedes almacenar y compartir imágenes Docker.

---

## **Dockerfile: Creando una Imagen para tu Aplicación**

- Un **Dockerfile** define cómo construir una imagen para tu aplicación.

### **Ejemplo de Dockerfile para FastAPI**

```dockerfile
# Usa una imagen base de Python
FROM python:3.9-slim

# Establece el directorio de trabajo
WORKDIR /app

# Copia los archivos de requisitos y de la aplicación
COPY requirements.txt .
COPY main.py .
COPY knn_iris.onnx .

# Instala las dependencias
RUN pip install --no-cache-dir -r requirements.txt

# Expone el puerto en el que se ejecutará la aplicación
EXPOSE 8000

# Comando para ejecutar la aplicación
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
```

## Resumen
1. Crear y entrenar un modelo
2. Evaluar el modelo
3. Una vez que el modelo funcione (se haya evaluado) crear una API
4. Crear los `endpoint`
5. Probar la aplicación
6. Crear un contenedor para todo el programa

# Despliegue de redes neuronales

## ¿Qué vamos a hacer?
1. Repasar brevemente cómo funciona una red neuronal
2. Crear la API (basado en el código de la última vez)
3. Dockerizar la aplicación
4. Consumir la API desde una aplicación
5. Quizás hacer un despliegue real

## ¿Qué es una red neuronal?

Una **red neuronal artificial** es un modelo computacional inspirado en el cerebro humano, compuesto por **neuronas** conectadas que trabajan en conjunto para resolver problemas.

<div style="text-align: center;">
  <img src="https://static.sciencelearn.org.nz/images/images/000/005/156/original/ART_Artificial_intelligence_Neural_network_explain_%281%29.png?1678746405" alt="Neural Network Explanation" style="width: 70%;">
</div>

##
- **Capas**:
  - **Entrada**: Recibe los datos.
  - **Ocultas**: Procesan la información.
  - **Salida**: Genera el resultado.


### ¿Cómo funciona una red neuronal?

1. **Feed Forward**:
   - Los datos se propagan desde la capa de entrada hasta la de salida.
   - Cada neurona aplica una **función de activación** a la suma ponderada de sus entradas.

2. **Entrenamiento**:
   - **Aprendizaje supervisado**: La red ajusta sus pesos en base a ejemplos conocidos.
   - **Retropropagación**: El error se propaga hacia atrás para actualizar los pesos.

## ImageNet

- **ImageNet** es una base de datos visual masiva diseñada para la investigación en reconocimiento de objetos y visión por computadora.
- Contiene **más de 14 millones de imágenes** etiquetadas manualmente en **más de 20,000 categorías**.
- Es la base del **ImageNet Large Scale Visual Recognition Challenge (ILSVRC)**, una competencia anual que ha impulsado avances significativos en el campo.

<div style="text-align: center;">
  <img src="https://i0.wp.com/syncedreview.com/wp-content/uploads/2020/06/Imagenet.jpg?fit=950%2C407&ssl=1" alt="ImageNet Overview" style="width: 70%;">
</div>

---

## Importancia de ImageNet

- **Estándar de Referencia**: ImageNet se ha convertido en el estándar para evaluar y comparar modelos de visión por computadora.
- **Impulso a la Innovación**: Competencias como ILSVRC han llevado al desarrollo de arquitecturas avanzadas como **AlexNet**, **VGG**, **ResNet** y **EfficientNet**.
- **Diversidad de Datos**: La gran variedad de imágenes y categorías permite que los modelos aprendan características generales aplicables a múltiples tareas.

---

## ¿Cómo ayuda ImageNet en la clasificación de imágenes?

- **Modelos Preentrenados**: Los modelos como **EfficientNet** se entrenan previamente en el conjunto de datos de ImageNet.
  - Esto significa que ya han aprendido características importantes de una amplia variedad de imágenes.
- **Transfer Learning (Aprendizaje por Transferencia)**:
  - Podemos utilizar estos modelos preentrenados y adaptarlos a tareas específicas con menos datos y tiempo de entrenamiento.
- **Alto Rendimiento**:
  - Gracias al entrenamiento en ImageNet, los modelos pueden clasificar imágenes con alta precisión incluso en categorías que no fueron parte del entrenamiento original.

---

## ImageNet y EfficientNet en nuestro taller

- **Uso de EfficientNet Preentrenado en ImageNet**:
  - Aprovecharemos un modelo EfficientNet preentrenado para **clasificar imágenes de manera efectiva**.
- **Beneficios**:
  - **Rapidez**: No necesitamos entrenar un modelo desde cero.
  - **Precisión**: Utilizamos un modelo que ya ha demostrado alto rendimiento en tareas de clasificación.
- **Implementación Práctica**:
  - Integraremos el modelo en una API con FastAPI.
  - Los usuarios podrán subir imágenes y obtener predicciones basadas en el conocimiento adquirido por el modelo a partir de ImageNet.

## EfficientNet: Introducción

- **EfficientNet** es una familia de redes neuronales convolucionales (CNN) que optimiza la eficiencia y precisión.
- Diseñada para mejorar el rendimiento en tareas de clasificación de imágenes manteniendo bajos los requisitos computacionales.

<div style="text-align: center;">
  <img src="https://wisdomml.in/wp-content/uploads/2023/03/eff_banner.png" alt="EfficientNet Banner" style="width: 70%;">
</div>

---

## ¿Qué hace especial a EfficientNet?

- **Escalado compuesto**: EfficientNet introduce un método innovador para escalar los modelos en tres dimensiones:
  - **Profundidad**: Número de capas en la red.
  - **Ancho**: Número de canales en cada capa.
  - **Resolución**: Tamaño de las imágenes de entrada.
- Este escalado compuesto permite crear modelos más precisos y eficientes que los modelos tradicionales.


---

## ¿Por qué es importante EfficientNet?

1. **Eficiencia**:
   - Utiliza menos parámetros y menor poder computacional en comparación con otras arquitecturas como ResNet o VGG.
   
2. **Alto Rendimiento**:
   - EfficientNet logra un alto rendimiento en benchmarks como **ImageNet**, alcanzando una mejor precisión con menos recursos.

3. **Flexibilidad**:
   - Puede escalarse para adaptarse a diferentes recursos computacionales, desde dispositivos pequeños hasta grandes servidores.


## Implementación práctica

- Usaremos un modelo **EfficientNet preentrenado** en ImageNet.
- Integraremos el modelo en una **API con FastAPI**.
- Permitiremos que los usuarios **suban imágenes** y obtengan **predicciones**.
